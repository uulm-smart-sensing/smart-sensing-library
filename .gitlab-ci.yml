image: gitlab.uni-ulm.de:5050/se-anwendungsprojekt-22-23/ci-tools/flutter-devtools:v1.1.0

stages:
  - analysis
  - test
  - build

variables:
  GIT_SUBMODULE_STRATEGY: recursive

before_script: &flutter_before_script
  - flutter --version
  - flutter clean
  - bash setup.sh


flutter-format:
  stage: analysis
  script:
    - flutter format . -o write --fix
    - git diff --exit-code

flutter-format:apply:
  stage: analysis
  needs: [ ]
  when: manual
  before_script:
    # FLUTTER_FORMAT_TOKEN is a group access token which is available as a CI variable
    - git remote add ci https://oauth2:${FLUTTER_FORMAT_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git
    - git config user.name "flutter-format bot"
    - git config user.email "noreply+flutter-format-bot@${CI_SERVER_HOST}"
    - *flutter_before_script
  script:
    - |
      flutter format . -o write --fix
      git commit -am "style: apply flutter-format"
      git push ci HEAD:$CI_COMMIT_REF_NAME
  after_script:
    - git remote rm ci

flutter-analyze:
  stage: analysis
  needs: [ ]
  before_script:
    - *flutter_before_script
    - mkdir -p report_outputs
    - curl -sSL https://github.com/fgardt/flutter_analyze_codeclimate/releases/latest/download/flutter_analyze_codeclimate > /usr/local/bin/flutter_analyze_codeclimate
    - chmod +x /usr/local/bin/flutter_analyze_codeclimate
  script:
    - flutter analyze --fatal-infos --write report_outputs/flutter.txt
  after_script:
    - flutter_analyze_codeclimate --input report_outputs/flutter.txt --output report_outputs/flutter.json
    - sed -i 's/"[^:]*\/smart\-sensing\-library\//"/g' report_outputs/flutter.json
  artifacts:
    paths:
      - report_outputs/flutter.json
    expire_in: 2 week
    reports:
      codequality: report_outputs/flutter.json


test:library:
  stage: test
  needs: [ ]
  before_script:
    - *flutter_before_script
    - mkdir -p report_outputs
  script:
    - flutter test --coverage --branch-coverage --coverage-path report_outputs/lcov.info --reporter json --test-randomize-ordering-seed random > report_outputs/test_report.json
  after_script:
    - flutter pub run junitreport:tojunit --input report_outputs/test_report.json --output report_outputs/test_report.xml
    - flutter pub run cobertura convert --input report_outputs/lcov.info --output report_outputs/lcov.xml
    - flutter pub run test_cov_console -f report_outputs/lcov.info -e lib/src/generated
  artifacts:
    paths:
      - report_outputs/test_report.xml
      - report_outputs/lcov.xml
    expire_in: 2 week
    reports:
      junit: report_outputs/test_report.xml
      coverage_report:
        path: report_outputs/lcov.xml
        coverage_format: cobertura
  coverage: '/\|\s*\d+(?:\.\d+)?\s*\|/'

test:example:
  stage: test
  needs: [ ]
  before_script:
    - *flutter_before_script
    - mkdir -p example/report_outputs
  script:
    - cd example
    - flutter test --coverage --branch-coverage --coverage-path report_outputs/lcov.info --reporter json --test-randomize-ordering-seed random > report_outputs/test_report.json
  after_script:
    - cd example
    - flutter pub run junitreport:tojunit --input report_outputs/test_report.json --output report_outputs/test_report.xml
    - flutter pub run cobertura convert --input report_outputs/lcov.info --output report_outputs/lcov.xml
    - flutter pub run test_cov_console -f report_outputs/lcov.info
  artifacts:
    paths:
      - example/report_outputs/test_report.xml
      - example/report_outputs/lcov.xml
    expire_in: 2 week
    reports:
      junit: example/report_outputs/test_report.xml
      coverage_report:
        path: example/report_outputs/lcov.xml
        coverage_format: cobertura
  coverage: '/\|\s*\d+(?:\.\d+)?\s*\|/'


build:android:
  stage: build
  needs: [ ]
  script:
    - cd example
    - flutter build apk
  after_script:
    - mv example/build/app/outputs/flutter-apk/app-release.apk .
  artifacts:
    paths:
      - app-release.apk
    expire_in: 2 week
    expose_as: "Android APK"
